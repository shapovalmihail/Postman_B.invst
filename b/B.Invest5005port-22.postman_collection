{
	"info": {
		"_postman_id": "b5f1c3a1-e023-4414-9099-de938e213bb6",
		"name": "5005port/2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17127925"
	},
	"item": [
		{
			"name": "First request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login_for_token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "misha",
							"type": "text"
						},
						{
							"key": "password",
							"value": "garaf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let jsonData = pm.response.json();\r",
							"let name_s_request = jsonData.name\r",
							"let name = \"Mike\"\r",
							" console.log (name_s_request)\r",
							" console.log (name)\r",
							"\r",
							"pm.test(\"Name_check\", function () {\r",
							"        pm.expect(name_s_request).to.eql(name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"let age = \"40\"\r",
							"console.log (\"age = \",age)\r",
							" let age_s_request = jsonData.age\r",
							"console.log (\"age_s_request = \",age_s_request)\r",
							"\r",
							"    pm.test(\"Age_check\", function () {\r",
							"        pm.expect(age).to.eql(age_s_request);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary = 2000\r",
							"let salary_s_request = jsonData.salary\r",
							"console.log (\"salary = \",salary)\r",
							"console.log (\"salary_s_request = \",salary_s_request)\r",
							"\r",
							"pm.test(\"Salary_check\", function () {\r",
							"    \r",
							"    pm.expect(salary).to.eql(salary_s_request);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							" \r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name1 = \"Mike\"\r",
							"let name_s_request1 = req.name\r",
							"\r",
							"\r",
							"pm.test(\"Name request test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(name1).to.eql(name_s_request1);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let age_req = \"40\"\r",
							"let age_s_request1 = req.age\r",
							"\r",
							"\r",
							"pm.test(\"Age request test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(age_req).to.eql(age_s_request1);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_req = \"2000\"\r",
							"let asalary_s_request = req.salary\r",
							"\r",
							"\r",
							"pm.test(\"Salary request test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(salary_req).to.eql(asalary_s_request);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary1 = jsonData.salary\r",
							"let salary2 = salary1*4\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year \r",
							"console.log (u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"Salary 1.5 year check\", function () {\r",
							"   \r",
							"    pm.expect(salary2).to.eql(u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log (jsonData.family)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mike",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info request_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name1 = \"Mike\"\r",
							"let name_s_requeste = request.data.name\r",
							"\r",
							"pm.test(\"Name_request_test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(name1).to.eql(name_s_requeste);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let age1 = \"40\"\r",
							"let age_s_request = request.data.age\r",
							"\r",
							"pm.test(\"Age_request_test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(age1).to.eql(age_s_request);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary1 = \"2000\"\r",
							"let salary_s_request = request.data.salary\r",
							"console.log (salary_s_request)\r",
							"\r",
							"pm.test(\"Salary_request_test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(salary1).to.eql(salary_s_request);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"\r",
							"console.log (jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"console.log (jsonData.family.pets.dog)\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"console.log (jsonData.family.pets.dog)\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"console.log (jsonData.family.pets.dog.name)\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"console.log (jsonData.family.pets.dog.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mike",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Mike&age=40&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mike"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							" \r",
							" var jsonData = pm.response.json();\r",
							"\r",
							"//  4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject () \r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name = \"Mike\"\r",
							"let name_s_request = req.name\r",
							"\r",
							"pm.test(\"Name Check 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(name).to.eql(name_s_request);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let age = \"40\"\r",
							"let age_s_request = req.age\r",
							"\r",
							"pm.test(\"Age Check 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(age).to.eql(age_s_request);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log (req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log (jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log (jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log (jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log (jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let sal_resp = jsonData.salary[0]\r",
							"let sal_req = pm.request.url.query.get('salary')\r",
							"    let sal_request = Number (sal_req)\r",
							"    \r",
							"\r",
							"pm.test(\"Salary Number resp=req\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_request).to.eql(sal_resp);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let sal_response = Number (jsonData.salary[1])\r",
							" let sal_reqq =  pm.request.url.query.get('salary')\r",
							"    let sal_req2 = (sal_reqq) *2\r",
							"   \r",
							"pm.test(\"Salary Number resp=req2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_response).to.eql(sal_req2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let sal_response2 = Number (jsonData.salary[2])\r",
							" let sal_request3 =  pm.request.url.query.get('salary')\r",
							"    let sal_req23 = (sal_reqq) *3\r",
							"\r",
							"pm.test(\"Salary Number resp=req3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_response2).to.eql(sal_req23);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"let name_environment = jsonData.name\r",
							"    pm.environment.set(\"name\",  name_environment);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"let age_environment = jsonData.age\r",
							"    pm.environment.set(\"age\",  age_environment);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"let salary_environment = jsonData.salary[0]\r",
							"    pm.environment.set(\"salary\", salary_environment);\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"\r",
							"jsonData.salary.forEach((sal_request3) => {\r",
							"console.log(sal_request3)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Mike&age=40&salary=2000&token=/s34lfgbj/misha/jjd909/46530kjkWpqc3392garaf161170evny",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mike"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "token",
							"value": "/s34lfgbj/misha/jjd909/46530kjkWpqc3392garaf161170evny"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_Info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let request_data = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"console.log (jsonData.start_qa_salary)\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"console.log (jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"console.log (jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"console.log (jsonData[\"qa_salary_after_1.5_year\"])\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"console.log (jsonData[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"console.log (jsonData.person)\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let sqa_sal = jsonData.start_qa_salary\r",
							"    let rd_sal = Number (request_data.salary) \r",
							"\r",
							"pm.test(\"Salary Check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sqa_sal).to.eql(rd_sal);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let salary_6 = jsonData.qa_salary_after_6_months\r",
							"    let salary_2y = request_data.salary * 2\r",
							"\r",
							"pm.test(\"6 months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(salary_6\r",
							").to.eql(salary_2y);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let sal_12 =  jsonData.qa_salary_after_12_months\r",
							"     let salary_12y = request_data.salary * 2.7\r",
							"\r",
							"\r",
							"pm.test(\"12 months\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_12).to.eql(salary_12y);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let sal_1_5 = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"let salary_1_5y = request_data.salary * 3.3\r",
							"\r",
							"pm.test(\"Salary 1.5\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_1_5).to.eql(salary_1_5y);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let sal_3_5 = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"let salary_3_5y = request_data.salary * 3.8\r",
							"\r",
							"pm.test(\"Salary 3.5\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(sal_3_5).to.eql(salary_3_5y);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let uname = jsonData.person.u_name[1]\r",
							"    let rsal = Number (request_data.salary)\r",
							"\r",
							"pm.test(\"1 element\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(uname).to.eql(rsal);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let uage = jsonData.person.u_age\r",
							"    let rage = Number (request_data.age)\r",
							"pm.test(\"Age check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(uage).to.eql(rage);\r",
							"});\r",
							"    \r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"let usal_5_years = jsonData.person.u_salary_5_years\r",
							"\r",
							"    let reqsal_5_y = request_data.salary * 4.2\r",
							"\r",
							"\r",
							"pm.test(\"5 years salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(usal_5_years).to.eql(reqsal_5_y);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
